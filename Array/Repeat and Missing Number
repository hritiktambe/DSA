

https://practice.geeksforgeeks.org/problems/find-missing-and-repeating2512/1


Explanation :
Use elements as Index and mark the visited places

Approach: 
Traverse the array. While traversing, use the absolute value of every element as an index and make the value at this index 
as negative to mark it visited. If something is already marked negative then this is the repeating element. 
To find missing, traverse the array again and look for a positive value.

// { Driver Code Starts
#include <bits/stdc++.h>

using namespace std;

 // } Driver Code Ends
class Solution{
public:
    int *findTwoElement(int *arr, int n) {
        
        vector<int> v;
        // cout<<*(arr+1)<<endl;
        for(int i=0;i<n;i++)
        v.push_back(*(arr+i));
        
        // for(auto i:v)
        // cout<<i<<" ";
        
        int a[2];
        memset(a,0,sizeof a);
        
        
        for(int i=0;i<n;i++)
        {
            
            v[abs(v[i])-1] = -1*v[abs(v[i])-1];
            
            if(v[abs(v[i])-1] > 0)
            a[0]=abs(v[i]);
            
        }
        
        
        for(int i=0;i<n;i++)
        {
            if(v[i]>0 and i+1!=a[0])
            {
                a[1]=i+1;
                break;
            }
        }
        // cout<<"first "<<a[0]<<" second "<<a[1]<<endl;
        int *d;
        d=a;
        return d;
        
    }
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) {
            cin >> a[i];
        }
        Solution ob;
        auto ans = ob.findTwoElement(a, n);
        cout << ans[0] << " " << ans[1] << "\n";
    }
    return 0;
}  // } Driver Code Ends